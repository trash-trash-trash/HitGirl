//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Scripts/Player/HGPlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HGPlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HGPlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HGPlayerControls"",
    ""maps"": [
        {
            ""name"": ""InGameActionMap"",
            ""id"": ""7fa6ccb1-af9f-42c3-9a6c-31ce47e2a4d0"",
            ""actions"": [
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""00a30f46-b898-44ac-86b1-92e0f98ad325"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseAction"",
                    ""type"": ""Button"",
                    ""id"": ""ad30cb5b-4a6f-46d1-8014-0de87d85f777"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AggressiveAction"",
                    ""type"": ""Button"",
                    ""id"": ""b31d2ea8-998a-4622-9a69-425d3868b558"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAction"",
                    ""type"": ""Value"",
                    ""id"": ""0bb0d7ad-b270-464e-9c06-f930cf5a2d50"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectInventory01"",
                    ""type"": ""Button"",
                    ""id"": ""5043d26a-5ff5-44cf-9ebe-72b7c97ad41f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectInventory02"",
                    ""type"": ""Button"",
                    ""id"": ""2a2e616f-a483-46e7-b1d3-ea3b7ec45a32"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextInventory"",
                    ""type"": ""Button"",
                    ""id"": ""f3c8f6e1-4701-41e6-9372-cb11f42860d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleRun"",
                    ""type"": ""Button"",
                    ""id"": ""f226bc3d-465d-418d-a2c7-a4d976c7b665"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2ba2f08b-b2eb-4652-9822-b29abd9819f0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bdf27976-f161-4190-8e34-918e4432621b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef0a52c1-931b-4310-95b5-26ced41c49f5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2166c400-d6c1-4c76-8345-9ba1c49a9155"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""84899c93-4f79-4f21-99bf-eb2f289c1954"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e387ca0-f2f4-4fd8-b53e-97c072cef38b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0ef6f43-f3f0-4a76-b9b4-d2ec78470ad9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""726462ee-d6d5-44e7-97c2-4a43e93bf156"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""127c3630-ad37-4711-b94f-4a440af58fd4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""903a8d76-0243-4911-a7b5-d30a0f59799c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""UseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c53817e-0ac9-432e-b101-171bb54253c6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""AggressiveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""327a469c-8c27-41e0-a808-733042bc88b2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa8b6345-bb5c-4007-be17-c0941a559d80"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectInventory01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77d23e61-8571-4d31-87f6-1cff39157336"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectInventory02"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bb71b5f-ada6-4236-b9e7-bfbfa982e0cb"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f13399d7-d585-48b9-8afb-179b0268d2b5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleRun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InGameActionMap
        m_InGameActionMap = asset.FindActionMap("InGameActionMap", throwIfNotFound: true);
        m_InGameActionMap_MoveAction = m_InGameActionMap.FindAction("MoveAction", throwIfNotFound: true);
        m_InGameActionMap_UseAction = m_InGameActionMap.FindAction("UseAction", throwIfNotFound: true);
        m_InGameActionMap_AggressiveAction = m_InGameActionMap.FindAction("AggressiveAction", throwIfNotFound: true);
        m_InGameActionMap_LookAction = m_InGameActionMap.FindAction("LookAction", throwIfNotFound: true);
        m_InGameActionMap_SelectInventory01 = m_InGameActionMap.FindAction("SelectInventory01", throwIfNotFound: true);
        m_InGameActionMap_SelectInventory02 = m_InGameActionMap.FindAction("SelectInventory02", throwIfNotFound: true);
        m_InGameActionMap_NextInventory = m_InGameActionMap.FindAction("NextInventory", throwIfNotFound: true);
        m_InGameActionMap_ToggleRun = m_InGameActionMap.FindAction("ToggleRun", throwIfNotFound: true);
    }

    ~@HGPlayerControls()
    {
        UnityEngine.Debug.Assert(!m_InGameActionMap.enabled, "This will cause a leak and performance issues, HGPlayerControls.InGameActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGameActionMap
    private readonly InputActionMap m_InGameActionMap;
    private List<IInGameActionMapActions> m_InGameActionMapActionsCallbackInterfaces = new List<IInGameActionMapActions>();
    private readonly InputAction m_InGameActionMap_MoveAction;
    private readonly InputAction m_InGameActionMap_UseAction;
    private readonly InputAction m_InGameActionMap_AggressiveAction;
    private readonly InputAction m_InGameActionMap_LookAction;
    private readonly InputAction m_InGameActionMap_SelectInventory01;
    private readonly InputAction m_InGameActionMap_SelectInventory02;
    private readonly InputAction m_InGameActionMap_NextInventory;
    private readonly InputAction m_InGameActionMap_ToggleRun;
    public struct InGameActionMapActions
    {
        private @HGPlayerControls m_Wrapper;
        public InGameActionMapActions(@HGPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_InGameActionMap_MoveAction;
        public InputAction @UseAction => m_Wrapper.m_InGameActionMap_UseAction;
        public InputAction @AggressiveAction => m_Wrapper.m_InGameActionMap_AggressiveAction;
        public InputAction @LookAction => m_Wrapper.m_InGameActionMap_LookAction;
        public InputAction @SelectInventory01 => m_Wrapper.m_InGameActionMap_SelectInventory01;
        public InputAction @SelectInventory02 => m_Wrapper.m_InGameActionMap_SelectInventory02;
        public InputAction @NextInventory => m_Wrapper.m_InGameActionMap_NextInventory;
        public InputAction @ToggleRun => m_Wrapper.m_InGameActionMap_ToggleRun;
        public InputActionMap Get() { return m_Wrapper.m_InGameActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionMapActionsCallbackInterfaces.Add(instance);
            @MoveAction.started += instance.OnMoveAction;
            @MoveAction.performed += instance.OnMoveAction;
            @MoveAction.canceled += instance.OnMoveAction;
            @UseAction.started += instance.OnUseAction;
            @UseAction.performed += instance.OnUseAction;
            @UseAction.canceled += instance.OnUseAction;
            @AggressiveAction.started += instance.OnAggressiveAction;
            @AggressiveAction.performed += instance.OnAggressiveAction;
            @AggressiveAction.canceled += instance.OnAggressiveAction;
            @LookAction.started += instance.OnLookAction;
            @LookAction.performed += instance.OnLookAction;
            @LookAction.canceled += instance.OnLookAction;
            @SelectInventory01.started += instance.OnSelectInventory01;
            @SelectInventory01.performed += instance.OnSelectInventory01;
            @SelectInventory01.canceled += instance.OnSelectInventory01;
            @SelectInventory02.started += instance.OnSelectInventory02;
            @SelectInventory02.performed += instance.OnSelectInventory02;
            @SelectInventory02.canceled += instance.OnSelectInventory02;
            @NextInventory.started += instance.OnNextInventory;
            @NextInventory.performed += instance.OnNextInventory;
            @NextInventory.canceled += instance.OnNextInventory;
            @ToggleRun.started += instance.OnToggleRun;
            @ToggleRun.performed += instance.OnToggleRun;
            @ToggleRun.canceled += instance.OnToggleRun;
        }

        private void UnregisterCallbacks(IInGameActionMapActions instance)
        {
            @MoveAction.started -= instance.OnMoveAction;
            @MoveAction.performed -= instance.OnMoveAction;
            @MoveAction.canceled -= instance.OnMoveAction;
            @UseAction.started -= instance.OnUseAction;
            @UseAction.performed -= instance.OnUseAction;
            @UseAction.canceled -= instance.OnUseAction;
            @AggressiveAction.started -= instance.OnAggressiveAction;
            @AggressiveAction.performed -= instance.OnAggressiveAction;
            @AggressiveAction.canceled -= instance.OnAggressiveAction;
            @LookAction.started -= instance.OnLookAction;
            @LookAction.performed -= instance.OnLookAction;
            @LookAction.canceled -= instance.OnLookAction;
            @SelectInventory01.started -= instance.OnSelectInventory01;
            @SelectInventory01.performed -= instance.OnSelectInventory01;
            @SelectInventory01.canceled -= instance.OnSelectInventory01;
            @SelectInventory02.started -= instance.OnSelectInventory02;
            @SelectInventory02.performed -= instance.OnSelectInventory02;
            @SelectInventory02.canceled -= instance.OnSelectInventory02;
            @NextInventory.started -= instance.OnNextInventory;
            @NextInventory.performed -= instance.OnNextInventory;
            @NextInventory.canceled -= instance.OnNextInventory;
            @ToggleRun.started -= instance.OnToggleRun;
            @ToggleRun.performed -= instance.OnToggleRun;
            @ToggleRun.canceled -= instance.OnToggleRun;
        }

        public void RemoveCallbacks(IInGameActionMapActions instance)
        {
            if (m_Wrapper.m_InGameActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActionMapActions @InGameActionMap => new InGameActionMapActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IInGameActionMapActions
    {
        void OnMoveAction(InputAction.CallbackContext context);
        void OnUseAction(InputAction.CallbackContext context);
        void OnAggressiveAction(InputAction.CallbackContext context);
        void OnLookAction(InputAction.CallbackContext context);
        void OnSelectInventory01(InputAction.CallbackContext context);
        void OnSelectInventory02(InputAction.CallbackContext context);
        void OnNextInventory(InputAction.CallbackContext context);
        void OnToggleRun(InputAction.CallbackContext context);
    }
}
